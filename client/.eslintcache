[{"C:\\Users\\matt\\Documents\\Onsite\\tileapp\\client\\src\\index.js":"1","C:\\Users\\matt\\Documents\\Onsite\\tileapp\\client\\src\\App.js":"2","C:\\Users\\matt\\Documents\\Onsite\\tileapp\\client\\src\\reportWebVitals.js":"3","C:\\Users\\matt\\Documents\\Onsite\\tileapp\\client\\src\\Main.js":"4","C:\\Users\\matt\\Documents\\Onsite\\tileapp\\client\\src\\LeafletMap.js":"5"},{"size":532,"mtime":1608586592047,"results":"6","hashOfConfig":"7"},{"size":1000,"mtime":1614712420879,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":409,"mtime":1614130499503,"results":"10","hashOfConfig":"11"},{"size":10829,"mtime":1614743092302,"results":"12","hashOfConfig":"7"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"11kkihp",{"filePath":"16","messages":"17","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ynhsau",{"filePath":"23","messages":"24","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"C:\\Users\\matt\\Documents\\Onsite\\tileapp\\client\\src\\index.js",[],["26","27"],"C:\\Users\\matt\\Documents\\Onsite\\tileapp\\client\\src\\App.js",["28","29","30","31","32","33"],"import './App.css';\nimport { MapContainer, TileLayer, CircleMarker, Marker} from 'react-leaflet';\nimport L from 'leaflet';\nimport LeafletMap from './LeafletMap.js'\nimport {Button}  from 'react-bootstrap';\nimport 'leaflet/dist/leaflet.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport {  } from 'antd';\nimport 'antd/dist/antd.css';\n\nclass App extends React.Component {\n\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n\n      online: false\n    }\n   \n  }\n  componentDidMount() {\n\n  }\n\n  handleOnline = (online) => {\n    this.setState({online: online});\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <LeafletMap>\n        {/* <svg className=\"online\" viewBox=\"1 1 10 10\" x=\"16\" width=\"16\" stroke={this.state.online ? \"lime\": \"red\"} \n            fill={this.state.online ? \"lime\": \"red\"}>\n            <circle cx=\"5\" cy=\"5\" r=\"3\" />\n          </svg>         */}\n        </LeafletMap>\n      </React.Fragment>\n    );\n  } \n}\nexport default App;","C:\\Users\\matt\\Documents\\Onsite\\tileapp\\client\\src\\reportWebVitals.js",[],"C:\\Users\\matt\\Documents\\Onsite\\tileapp\\client\\src\\Main.js",[],"C:\\Users\\matt\\Documents\\Onsite\\tileapp\\client\\src\\LeafletMap.js",["34","35","36","37","38","39","40","41","42","43"],"import './LeafletMap.css';\r\nimport { MapContainer, TileLayer, CircleMarker, Polyline, useMap, useMapEvents, ScaleControl} from 'react-leaflet';\r\nimport L, { LatLng } from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { Card }  from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Collapse, Button, Row, Col} from 'antd';\r\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\r\n\r\nfunction MapEvents(props) {\r\n    const map = useMapEvents({\r\n      click: (e) => {\r\n        props.mouse(e.latlng);\r\n      }     \r\n    })\r\n    return null\r\n  }\r\n\r\nfunction Thumbnail(props) {\r\n    useEffect(() => {\r\n\r\n    });\r\n    if (props.photo !== null) {\r\n        return (<img className=\"image\"\r\n        src={`data:image/jpeg;base64,${props.photo}`}/>\r\n        );\r\n    } else {\r\n        return null;\r\n    }\r\n    \r\n}\r\n\r\n  function FootpathPolyLine(props) {\r\n    const redOptions = { color: 'red' }\r\n    let otherOptions = null;\r\n\r\n    switch(props.positions.side) {\r\n        case \"L\":\r\n                otherOptions = { color: 'blue' }\r\n          break;\r\n        case \"R\":\r\n                otherOptions = { color: 'orange' }\r\n          break;\r\n        default:\r\n            otherOptions = { color: 'black' }\r\n        break;\r\n    }\r\n    let geojson = JSON.parse(props.positions.geojson);\r\n    let coords = []\r\n    geojson.coordinates.forEach(element => {\r\n        let temp = element[0];\r\n        element[0] = element[1];\r\n        element[1] = temp;\r\n        coords.push(element)\r\n    });\r\n    return ( <Polyline\r\n        key={`marker-${props.idx}`} \r\n        pathOptions={(props.idx == 0) ? redOptions: otherOptions}\r\n        positions={coords}     \r\n        >\r\n      </Polyline>);\r\n  }\r\n\r\n\r\nfunction LeafletMap(props) {\r\n\r\n    const gnssObj = {\r\n        latitude: \"---\",\r\n        longitude: \"---\",\r\n        altitude: \"---\",\r\n        satellites: \"---\",\r\n        hdop: \"---\",\r\n        course: \"---\",\r\n        speed: \"---\"\r\n    }\r\n\r\n    const EARTH_RADIUS = 6371000 //metres\r\n    const [latlng, setPosition] = useState([]);\r\n    const [footpaths, setFootpaths] = useState([]);\r\n    const [mode, setMode] = useState(\"AUTO\");\r\n    const [project, setProject] = useState(null);\r\n    const [photo, setPhoto] = useState(null);\r\n    const [gpsData, setGpsData] = useState([gnssObj]);\r\n    const [host] = useState(\"localhost:5000\");\r\n    const [online, setOnline] = useState(false);\r\n    const [camera, setCamera] = useState(\"Offline\");\r\n    const positionRef = useRef();\r\n       /**\r\n     * Calculates distance on earth surface\r\n     */\r\n    const calcGCDistance = (distance) => {\r\n        return distance * EARTH_RADIUS * (Math.PI /180);\r\n    }\r\n\r\n    const pollServer = () => {\r\n\r\n        const interval = setInterval(() => {\r\n            getPosition().then(data => { \r\n                if (typeof(data) != \"undefined\") {\r\n                    setPhoto(data.photo)\r\n                    if (data.position !== {}) {\r\n                        let lat = data.position.latitude;\r\n                        let lng = data.position.longitude;\r\n                        setPosition([L.latLng(lat, lng)]);\r\n                        setGpsData([data.position]);       \r\n                    }    \r\n                }               \r\n            })    \r\n        }, 1000);\r\n    }\r\n\r\n    const mousePosition = async (latlng) => {\r\n        try {\r\n            const response = await fetch(\"http://\" + host + '/mouse', {\r\n                method: 'POST',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',        \r\n                },\r\n                body: JSON.stringify({\r\n                    project: project,\r\n                    lat: latlng.lat,\r\n                    lng: latlng.lng,\r\n                })\r\n            });\r\n            if (response.ok) {\r\n                const body = await response.json();\r\n                let fp = []\r\n                ///console.log(calcGCDistance(body.message[0].dist));\r\n                for (let i = 0; i < body.message.length; i++) {\r\n                    fp.push(body.message[i])\r\n                }\r\n                setFootpaths(fp);\r\n                return body; \r\n            } else {\r\n                \r\n                return Error(response);\r\n            }\r\n        } catch {\r\n            setOnline(false);\r\n            //props.online(false);\r\n            return new Error(\"connection error\")\r\n        }    \r\n    };\r\n    \r\n    const callBackendAPI = async () => {\r\n        try {\r\n            let response = await fetch(\"http://\" + host + '/api');\r\n            if (response.ok) {\r\n                setOnline(true);\r\n                pollServer();\r\n                const body = await response.json();\r\n                console.log(body)\r\n                return body; \r\n            } else {\r\n                console.log(response);\r\n                setOnline(false);\r\n                return Error(response);\r\n            }\r\n        } catch {\r\n            setOnline(false);\r\n            return new Error(\"connection error\")\r\n        } \r\n  \r\n    };\r\n      \r\n    const getPosition = async () => {\r\n    try {\r\n        const response = await fetch(\"http://\" + host + '/position')\r\n    \r\n        if (response.status !== 200) {\r\n            throw Error(response) \r\n        } else {\r\n            try {\r\n                setOnline(true);\r\n                \r\n                const body = await response.json();\r\n                if (!body.open) {\r\n                    setOnline(false);\r\n                } else {\r\n                    return body;\r\n                    \r\n                }          \r\n            } catch {\r\n                console.log(\"position error\")\r\n            }      \r\n            }\r\n            //return body; \r\n    } catch {\r\n        setOnline(false);\r\n        console.log(\"server error\"); \r\n    }  \r\n    };\r\n\r\n      const clickAuto = (e) => {\r\n        console.log('marker clicked')\r\n        console.log(e.target.innerHTML);\r\n        if (e.target.innerHTML === \"AUTO\") {\r\n            setMode(\"MANUAL\")\r\n        } else {\r\n            setMode(\"AUTO\")\r\n        }\r\n      };\r\n\r\n      const clickOnline = (e) => {\r\n        callBackendAPI(); \r\n      };\r\n      \r\n\r\n    //component did mount\r\n    // useEffect(() => {\r\n    //     console.log(\"component mounted\")\r\n    //     if(online) {\r\n    //     const interval = setInterval(() => {\r\n    //         getPosition().then(data => { \r\n    //             if (typeof(data) != \"undefined\") {\r\n    //                 setPhoto(data.photo)\r\n    //                 if (data.position !== {}) {\r\n    //                     let lat = data.position.latitude;\r\n    //                     let lng = data.position.longitude;\r\n    //                     setPosition([L.latLng(lat, lng)]);\r\n    //                     setGpsData([data.position]);       \r\n    //                 }    \r\n    //             }               \r\n    //         })    \r\n    //     }, 1000);\r\n    //     return () => clearInterval(interval);\r\n    // }}, [getPosition]);\r\n\r\n  return (\r\n      \r\n    <React.Fragment>\r\n        <MapContainer \r\n            className=\"map\" \r\n            center={[-36.81835, 174.74581]} \r\n            zoom={12} \r\n            minZoom={10}\r\n            maxZoom={18}\r\n            scrollWheelZoom={true}\r\n            keyboard={true}\r\n        >\r\n        <MapEvents mouse={mousePosition}/>\r\n        <div className=\"camera\">\r\n            <Card className=\"camera-card\">\r\n                <Card.Body border=\"secondary\">    \r\n                <Card.Title>Camera\r\n                <Button \r\n                    className=\"camera=btn\"\r\n                    variant=\"primary\" \r\n                    size=\"sm\"\r\n                    onClick={clickOnline} \r\n                    >{camera}</Button>\r\n                </Card.Title>\r\n                    <Thumbnail photo={photo}/>\r\n                    \r\n                </Card.Body>\r\n            </Card>\r\n        </div>  \r\n        <Row className=\"tool-menu\">\r\n            <Col className=\"mode-col\" \r\n            span={50}\r\n            >\r\n                <Button \r\n                    className=\"mode=btn\"\r\n                    type=\"default\"\r\n                    onClick={clickAuto}\r\n                >{mode}\r\n                </Button>\r\n            </Col>\r\n            <Col className=\"gps-menu\" span={150}>\r\n                <Collapse >\r\n                    <svg \r\n                        className=\"gnss-online\" \r\n                        viewBox=\"1 1 10 10\" x=\"16\" \r\n                        width=\"16\" \r\n                        stroke={online ? \"lime\": \"red\"} \r\n                        fill={online ? \"lime\": \"red\"} \r\n                        >\r\n                        <circle cx=\"5\" cy=\"5\" r=\"3\" />\r\n                    </svg>       \r\n                    <Collapse.Panel \r\n                        className=\"gps-panel\" \r\n                        header=\"GNSS\" \r\n                        key=\"1\">\r\n                    {gpsData.map((position, idx) =>\r\n                        <div className=\"gps-panel\" key={`marker-${idx}`} >\r\n                            <b>Lat: {position.latitude}</b><br></br>\r\n                            <b>Lng: {position.longitude}</b><br></br>\r\n                            <b>Alt: {position.altitude}m</b><br></br>\r\n                            <b>Sat: {position.satellites}</b><br></br>\r\n                            <b>HDop: {position.hdop}m</b><br></br>\r\n                            <b>Course: {position.course}</b><br></br>\r\n                            <b>Speed: {position.speed}km/hr</b>\r\n                        </div>\r\n                    )}\r\n                    </Collapse.Panel>\r\n                </Collapse>\r\n            </Col>\r\n        </Row>\r\n        \r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          //url=\"/tiles/auckland/{z}/{x}/{y}.png\"\r\n        />\r\n         <ScaleControl name=\"Scale\" className=\"scale\"/>\r\n        {latlng.map((position, idx) =>\r\n            <CircleMarker \r\n              ref={positionRef}\r\n              key={`marker-${idx}`} \r\n              center={position}\r\n              radius ={5}\r\n              fill={true}\r\n              fillOpacity={1.0}\r\n              color={online ? \"blue\": \"red\"}\r\n              eventHandlers={{\r\n                click: () => {\r\n                  console.log('marker clicked')\r\n                },\r\n              }}\r\n              >\r\n              \r\n            </CircleMarker>\r\n          )}\r\n          {footpaths.map((positions, idx) =>\r\n          <FootpathPolyLine\r\n            key={`marker-${idx}`} \r\n            positions={positions}\r\n            idx={idx}\r\n          />\r\n          )}\r\n      </MapContainer>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default LeafletMap;\r\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":2,"column":10,"nodeType":"50","messageId":"51","endLine":2,"endColumn":22},{"ruleId":"48","severity":1,"message":"52","line":2,"column":24,"nodeType":"50","messageId":"51","endLine":2,"endColumn":33},{"ruleId":"48","severity":1,"message":"53","line":2,"column":35,"nodeType":"50","messageId":"51","endLine":2,"endColumn":47},{"ruleId":"48","severity":1,"message":"54","line":2,"column":49,"nodeType":"50","messageId":"51","endLine":2,"endColumn":55},{"ruleId":"48","severity":1,"message":"55","line":3,"column":8,"nodeType":"50","messageId":"51","endLine":3,"endColumn":9},{"ruleId":"48","severity":1,"message":"56","line":5,"column":9,"nodeType":"50","messageId":"51","endLine":5,"endColumn":15},{"ruleId":"48","severity":1,"message":"57","line":2,"column":59,"nodeType":"50","messageId":"51","endLine":2,"endColumn":65},{"ruleId":"48","severity":1,"message":"58","line":3,"column":13,"nodeType":"50","messageId":"51","endLine":3,"endColumn":19},{"ruleId":"48","severity":1,"message":"59","line":8,"column":46,"nodeType":"50","messageId":"51","endLine":8,"endColumn":57},{"ruleId":"48","severity":1,"message":"60","line":11,"column":11,"nodeType":"50","messageId":"51","endLine":11,"endColumn":14},{"ruleId":"61","severity":1,"message":"62","line":24,"column":17,"nodeType":"63","endLine":25,"endColumn":56},{"ruleId":"64","severity":1,"message":"65","line":58,"column":33,"nodeType":"66","messageId":"67","endLine":58,"endColumn":35},{"ruleId":"48","severity":1,"message":"68","line":81,"column":21,"nodeType":"50","messageId":"51","endLine":81,"endColumn":31},{"ruleId":"48","severity":1,"message":"69","line":86,"column":20,"nodeType":"50","messageId":"51","endLine":86,"endColumn":29},{"ruleId":"48","severity":1,"message":"70","line":91,"column":11,"nodeType":"50","messageId":"51","endLine":91,"endColumn":25},{"ruleId":"48","severity":1,"message":"71","line":97,"column":15,"nodeType":"50","messageId":"51","endLine":97,"endColumn":23},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'MapContainer' is defined but never used.","Identifier","unusedVar","'TileLayer' is defined but never used.","'CircleMarker' is defined but never used.","'Marker' is defined but never used.","'L' is defined but never used.","'Button' is defined but never used.","'useMap' is defined but never used.","'LatLng' is defined but never used.","'useCallback' is defined but never used.","'map' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setProject' is assigned a value but never used.","'setCamera' is assigned a value but never used.","'calcGCDistance' is assigned a value but never used.","'interval' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]