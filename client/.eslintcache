[{"S:\\TileApp\\client\\src\\index.js":"1","S:\\TileApp\\client\\src\\App.js":"2","S:\\TileApp\\client\\src\\reportWebVitals.js":"3","S:\\TileApp\\client\\src\\LeafletMap.js":"4"},{"size":551,"mtime":1615753483129,"results":"5","hashOfConfig":"6"},{"size":1043,"mtime":1615753483104,"results":"7","hashOfConfig":"6"},{"size":375,"mtime":1615753483139,"results":"8","hashOfConfig":"6"},{"size":17919,"mtime":1615753483116,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1ikd3fj",{"filePath":"13","messages":"14","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"S:\\TileApp\\client\\src\\index.js",[],["21","22"],"S:\\TileApp\\client\\src\\App.js",["23","24","25","26","27","28"],"import './App.css';\r\nimport { MapContainer, TileLayer, CircleMarker, Marker} from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport LeafletMap from './LeafletMap.js'\r\nimport {Button}  from 'react-bootstrap';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport {  } from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n      online: false\r\n    }\r\n   \r\n  }\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  handleOnline = (online) => {\r\n    this.setState({online: online});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <LeafletMap>\r\n        {/* <svg className=\"online\" viewBox=\"1 1 10 10\" x=\"16\" width=\"16\" stroke={this.state.online ? \"lime\": \"red\"} \r\n            fill={this.state.online ? \"lime\": \"red\"}>\r\n            <circle cx=\"5\" cy=\"5\" r=\"3\" />\r\n          </svg>         */}\r\n        </LeafletMap>\r\n      </React.Fragment>\r\n    );\r\n  } \r\n}\r\nexport default App;","S:\\TileApp\\client\\src\\reportWebVitals.js",[],"S:\\TileApp\\client\\src\\LeafletMap.js",["29","30","31","32","33","34","35","36","37","38","39","40"],"import './LeafletMap.css';\r\nimport { MapContainer, TileLayer, CircleMarker, Polyline, useMap, useMapEvents, ScaleControl} from 'react-leaflet';\r\nimport L, { LatLng } from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport { Card }  from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Collapse, Button, Row, Col, Menu, Dropdown} from 'antd';\r\nimport { DownOutlined} from '@ant-design/icons';\r\nimport 'antd/dist/antd.css';\r\nimport React, { useState, useEffect, useRef} from 'react';\r\n\r\nfunction isEmpty(obj) {\r\n    return Object.keys(obj).length === 0;\r\n}\r\n\r\nfunction MapEvents(props) {\r\n    const map = useMapEvents({\r\n      click: (e) => {\r\n        props.mouse(e.latlng);\r\n      }     \r\n    })\r\n    return null;\r\n  }\r\n\r\nfunction Thumbnail(props) {\r\n    useEffect(() => {\r\n\r\n    });\r\n    if (props.photo !== null) {\r\n        return (<img className=\"image\"\r\n        src={`data:image/jpeg;base64,${props.photo}`}/>\r\n        );\r\n    } else {\r\n        return null;\r\n    }\r\n    \r\n}\r\n\r\n  function FootpathPolyLine(props) {\r\n    const redOptions = { color: 'red' }\r\n    let otherOptions = null;\r\n\r\n    switch(props.positions.side) {\r\n        case \"L\":\r\n                otherOptions = { color: 'blue' }\r\n          break;\r\n        case \"R\":\r\n                otherOptions = { color: 'orange' }\r\n          break;\r\n        default:\r\n            otherOptions = { color: 'black' }\r\n        break;\r\n    }\r\n    let geojson = JSON.parse(props.positions.geojson);\r\n    let coords = []\r\n    geojson.coordinates.forEach(element => {\r\n        let temp = element[0];\r\n        element[0] = element[1];\r\n        element[1] = temp;\r\n        coords.push(element)\r\n    });\r\n    return ( <Polyline\r\n        key={`marker-${props.idx}`} \r\n        pathOptions={(props.idx == 0) ? redOptions: otherOptions}\r\n        positions={coords}     \r\n        >\r\n      </Polyline>);\r\n  }\r\n\r\n\r\nfunction LeafletMap(props) {\r\n\r\n    const gnssObj = {\r\n        latitude: \"---\",\r\n        longitude: \"---\",\r\n        altitude: \"---\",\r\n        satellites: \"---\",\r\n        hdop: \"---\",\r\n        course: \"---\",\r\n        speed: \"---\"\r\n    }\r\n\r\n    const cameraObj = {\r\n        battery: \"---\",\r\n        error: \"---\",\r\n        frequency: \"---\",\r\n        filename: \"---\",\r\n        savetime: \"---\",\r\n    }\r\n\r\n    const EARTH_RADIUS = 6371000 //metres\r\n    const [latlng, setPosition] = useState([]);\r\n    const [footpaths, setFootpaths] = useState([]);\r\n    const [mode, setMode] = useState(\"AUTO\");\r\n    const [project, setProject] = useState(null);\r\n    const [photo, setPhoto] = useState(null);\r\n    const [gpsData, setGpsData] = useState([gnssObj]);\r\n    const [cameraData, setCameraData] = useState([cameraObj]);\r\n    const [host] = useState(\"localhost:5000\");\r\n    const [gnssOnline, setgnssOnline] = useState(false);\r\n    const [camera, setCamera] = useState(\"Offline\");\r\n    const [recording, setRecording] = useState(false);\r\n    const [cameraName, setCameraName] = useState(\"---\");\r\n    const [baud, setBaud] = useState(\"---\");\r\n    const [comPort, setComPort] = useState(\"---\");\r\n    const positionRef = useRef();\r\n       /**\r\n     * Calculates distance on earth surface\r\n     */\r\n    const calcGCDistance = (distance) => {\r\n        return distance * EARTH_RADIUS * (Math.PI /180);\r\n    }\r\n    let online = false;\r\n    let interval = null;\r\n    const setOnline = (isOnline) => {\r\n        setgnssOnline(isOnline);\r\n        online = isOnline;\r\n    }\r\n\r\n    const getOnline = () => {\r\n        return online;\r\n    }\r\n\r\n    const pollServer = (rate) => {    \r\n        interval = setInterval(() => {\r\n            if(online) {\r\n            getPosition().then(data => {\r\n                if (typeof(data) !== \"undefined\") {\r\n                    setPhoto(data.photo)\r\n                    if (data.position !== null) {\r\n                        let lat = data.position.latitude;\r\n                        let lng = data.position.longitude;\r\n                        setPosition([L.latLng(lat, lng)]);\r\n                        setGpsData([data.position]);\r\n                        let f = null;\r\n                        let s = null;\r\n                        let fq = null;\r\n\r\n                        if (data.message.filename == null) {\r\n                            f = \"---\"\r\n                        } else {\r\n                            let filename = data.message.filename.split(\"_\");\r\n                            f = filename[filename.length - 1]\r\n                        }\r\n                        if (data.message.frequency == null) {\r\n                            fq = \"---\"\r\n                        } else {\r\n                            fq = data.message.frequency\r\n                        }\r\n                        if (data.message.savetime == null) {\r\n                            s = \"---\"\r\n                        } else {\r\n                            s = data.message.savetime\r\n                        }\r\n                        let cameraObj = {\r\n                            battery: data.message.battery,\r\n                            error: data.message.error,\r\n                            frequency: fq,\r\n                            filename: f,\r\n                            savetime: s,\r\n                        }\r\n                        setCameraData([cameraObj]);   \r\n                    }    \r\n                }               \r\n            })\r\n        }          \r\n        }, rate);     \r\n    }\r\n\r\n    const mousePosition = async (latlng) => {\r\n        \r\n        console.log(\"click\");\r\n        try {\r\n            const response = await fetch(\"http://\" + host + '/mouse', {\r\n                method: 'POST',\r\n                credentials: 'same-origin',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',        \r\n                },\r\n                body: JSON.stringify({\r\n                    project: project,\r\n                    lat: latlng.lat,\r\n                    lng: latlng.lng,\r\n                })\r\n            });\r\n            if (response.ok) {\r\n                const body = await response.json();\r\n                let fp = []\r\n                ///console.log(calcGCDistance(body.message[0].dist));\r\n                for (let i = 0; i < body.message.length; i++) {\r\n                    fp.push(body.message[i])\r\n                }\r\n                setFootpaths(fp);\r\n                return body; \r\n            } else {\r\n                \r\n                return Error(response);\r\n            }\r\n        } catch {\r\n            setOnline(false);\r\n            return new Error(\"connection error\")\r\n        }    \r\n    };\r\n    \r\n    const callBackendAPI = async () => {\r\n        try {\r\n            let response = await fetch(\"http://\" + host + '/api');\r\n            if (response.ok) {\r\n                const body = await response.json();\r\n                console.log(body)\r\n                if (body.gnss) {\r\n                    setOnline(true);\r\n                    pollServer(1000);\r\n                } else {\r\n                    alert(\"serial port closed - no gnss receiver detected\")\r\n                }\r\n                return body; \r\n            } else {\r\n                console.log(response);\r\n                setOnline(false);\r\n                return Error(response);\r\n            }\r\n        } catch {\r\n            setOnline(false);\r\n            return new Error(\"connection error\")\r\n        } \r\n  \r\n    };\r\n      \r\n    const getPosition = async () => {\r\n            try {\r\n                const response = await fetch(\"http://\" + host + '/position')\r\n                if (!response.ok) {\r\n                    throw Error(response) \r\n                } else {\r\n                    try {\r\n                        const body = await response.json();\r\n                        console.log(body);\r\n                        if (body.message !== null) {\r\n                            setRecording(body.message.recording);\r\n                        }\r\n                        if (!body.open) {\r\n                            setOnline(false);\r\n\r\n                        } else {\r\n                            return body;     \r\n                        }          \r\n                    } catch {\r\n                        console.log(\"position error\")\r\n                    }      \r\n                }\r\n                    //return body; \r\n            } catch {\r\n                setOnline(false);\r\n                console.log(\"server error\"); \r\n            }  \r\n    };\r\n\r\n      const clickAuto = (e) => {\r\n        if (e.target.innerHTML === \"AUTO\") {\r\n            setMode(\"MANUAL\")\r\n        } else {\r\n            setMode(\"AUTO\")\r\n        }\r\n      };\r\n\r\n    const clickOnline = (e) => {\r\n        e.preventDefault();\r\n        let res = callBackendAPI(); \r\n    };\r\n\r\n    const clickCamera = (e) => {\r\n        setCameraName(e.key);\r\n    }\r\n\r\n    const clickBaud = (e) => {\r\n        setBaud(e.key);\r\n    }\r\n\r\n    const clickCom = (e) => {\r\n        setComPort(e.key);\r\n    }\r\n\r\n    /**\r\n     * Handler for clicking record button. Starts and stops android camera\r\n     * @param {click event} e \r\n     * @returns response\r\n     */\r\n    const clickRecord = async(e) => {\r\n    try {\r\n        let response = await fetch(\"http://\" + host + '/record', {\r\n            method: 'POST',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',        \r\n            },\r\n            body: JSON.stringify({\r\n                command: recording\r\n            })\r\n        });\r\n        if (response.ok) {\r\n            const body = await response.json();\r\n            console.log(body)\r\n            return body; \r\n        } else {\r\n            console.log(response);\r\n            return Error(response);\r\n        }\r\n    } catch {\r\n        return new Error(\"record error\")\r\n    } \r\n    };\r\n\r\n    const baudMenu = (\r\n        <Menu onClick={e => clickBaud(e)}>\r\n            <Menu.Item key=\"115200\">\r\n            115200\r\n            </Menu.Item>\r\n            <Menu.Item key=\"57600\">\r\n            57600\r\n            </Menu.Item >\r\n            <Menu.Item key=\"38400\">\r\n            38400\r\n            </Menu.Item>\r\n            <Menu.Item key=\"19200\">\r\n            19200\r\n            </Menu.Item>\r\n            <Menu.Item key=\"9600\">\r\n            9600\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n\r\n    const comMenu = (\r\n        <Menu onClick={e => clickCom(e)}>\r\n            <Menu.Item key=\"COM1\">\r\n            COM1\r\n            </Menu.Item>\r\n            <Menu.Item key=\"COM2\">\r\n            COM2\r\n            </Menu.Item >\r\n            <Menu.Item key=\"COM3\">\r\n            COM3\r\n            </Menu.Item>\r\n            <Menu.Item key=\"COM4\">\r\n            COM4\r\n            </Menu.Item>\r\n            <Menu.Item key=\"COM5\">\r\n            COM5\r\n            </Menu.Item>\r\n            <Menu.Item key=\"COM6\">\r\n            COM6\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n\r\n    const menu = (\r\n        <Menu onClick={e => clickCamera(e)}>\r\n            <Menu.Item key=\"C12\">\r\n            C12\r\n            </Menu.Item>\r\n            <Menu.Item key=\"C11\">\r\n             C11\r\n            </Menu.Item >\r\n            <Menu.Item key=\"C10\">\r\n            C10\r\n            </Menu.Item>\r\n        </Menu>\r\n    );\r\n\r\n  return (\r\n      \r\n    <React.Fragment>\r\n        <MapContainer \r\n            className=\"map\" \r\n            center={[-36.81835, 174.74581]} \r\n            zoom={12} \r\n            minZoom={10}\r\n            maxZoom={18}\r\n            scrollWheelZoom={true}\r\n            keyboard={true}\r\n        >\r\n        <div className=\"camera\">\r\n            <Card className=\"camera-card\">\r\n                <Card.Body border=\"secondary\">\r\n                    <Button \r\n                        className=\"connect=btn\"\r\n                        variant=\"primary\" \r\n                        size=\"sm\"\r\n                        onClick={clickOnline} \r\n                        >{camera}\r\n                    </Button>           \r\n                 <div>\r\n                    <Thumbnail photo={photo}/>\r\n                </div>   \r\n                {/* </Card.Title> */}\r\n                    \r\n                    \r\n                </Card.Body>\r\n            </Card>\r\n        </div>  \r\n        <Row className=\"tool-menu\">\r\n            <Col className=\"mode-col\" span={4}>\r\n                <Button \r\n                    className=\"mode=btn\"\r\n                    type=\"default\"\r\n                    onClick={clickAuto}\r\n                >{mode}\r\n                </Button>\r\n            </Col>\r\n            <Col className=\"camera-menu\" span={8}>\r\n                <Collapse >\r\n                    <svg \r\n                        className=\"svg-status\" \r\n                        viewBox=\"1 1 10 10\" x=\"16\" \r\n                        width=\"16\" \r\n                        stroke={recording ? \"limegreen\": \"red\"} \r\n                        fill={recording ? \"limegreen\": \"red\"} \r\n                        onClick={clickRecord}\r\n                        >\r\n                        <circle cx=\"5\" cy=\"5\" r=\"3\" />\r\n                    </svg>  \r\n                    <Collapse.Panel \r\n                        className=\"camera-panel\" \r\n                        header=\"CAMERA\" \r\n                        key=\"1\">\r\n                    {cameraData.map((status, idx) =>\r\n                    <div key={`marker-${idx}`} >\r\n                    <div>\r\n                        <b>\r\n                            {\"Camera: \"}\r\n                        </b>\r\n                        <Dropdown overlay={menu} trigger=\"click\"  className=\"camera-dropdown\">\r\n                            <span className=\"camera-panel\"  onClick={e => e.preventDefault()}>\r\n                            {cameraName}<DownOutlined />\r\n                            </span>\r\n                        </Dropdown >\r\n                    </div>\r\n                        <div className=\"gps-panel\" >\r\n                            <b>Bat: {status.battery}%</b><br></br>\r\n                            <b>Error: {status.error}</b><br></br>\r\n                            <b>Frequency: {status.frequency}</b><br></br>\r\n                            <b>Photo: {status.filename}</b><br></br>\r\n                            <b>Save time: {status.savetime}ms</b>\r\n                        </div>\r\n                    </div>  \r\n                    )}\r\n                    </Collapse.Panel>\r\n                    </Collapse>\r\n                    \r\n            </Col>\r\n            <Col className=\"gps-menu\" span={9}>\r\n                <Collapse >\r\n                    <svg \r\n                        className=\"svg-status\" \r\n                        viewBox=\"1 1 10 10\" x=\"16\" \r\n                        width=\"16\" \r\n                        stroke={gnssOnline ? \"limegreen\": \"red\"} \r\n                        fill={gnssOnline ? \"limegreen\": \"red\"} \r\n                        >\r\n                        <circle cx=\"5\" cy=\"5\" r=\"3\" />\r\n                    </svg>       \r\n                    <Collapse.Panel \r\n                        className=\"gps-panel\" \r\n                        header=\"GNSS\" \r\n                        key=\"1\">\r\n                    {gpsData.map((position, idx) =>\r\n                    <div key={`marker-${idx}`} >\r\n                        <div className=\"gps-panel\" >\r\n                            <b>Lat: {position.latitude}</b><br></br>\r\n                            <b>Lng: {position.longitude}</b><br></br>\r\n                            <b>Alt: {position.altitude}m</b><br></br>\r\n                            <b>Sat: {position.satellites}</b><br></br>\r\n                            <b>HDop: {position.hdop}m</b><br></br>\r\n                            <b>Course: {position.course}</b><br></br>\r\n                            <b>Speed: {position.speed}km/hr</b>\r\n                        </div>\r\n                        <div>\r\n                        <b>{\"Baud: \"}</b>\r\n                        <Dropdown overlay={baudMenu} trigger=\"click\"  className=\"camera-dropdown\">\r\n                            <span className=\"camera-panel\"  onClick={e => e.preventDefault()}>\r\n                            {baud}<DownOutlined />\r\n                            </span>\r\n                            \r\n                        </Dropdown ><br></br>\r\n                        </div>  \r\n                        <b>{\"COM Port: \"}</b>\r\n                        <Dropdown overlay={comMenu} trigger=\"click\"  className=\"camera-dropdown\">\r\n                            <span className=\"camera-panel\"  onClick={e => e.preventDefault()}>\r\n                            {comPort}<DownOutlined />\r\n                            </span>\r\n                        </Dropdown >\r\n                        </div>\r\n                    )}\r\n                    </Collapse.Panel>\r\n                </Collapse>\r\n            </Col>\r\n        </Row>\r\n        \r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          //url=\"/tiles/auckland/{z}/{x}/{y}.png\"\r\n        />\r\n         <ScaleControl name=\"Scale\" className=\"scale\"/>\r\n        {latlng.map((position, idx) =>\r\n            <CircleMarker \r\n              ref={positionRef}\r\n              key={`marker-${idx}`} \r\n              center={position}\r\n              radius ={5}\r\n              fill={true}\r\n              fillOpacity={1.0}\r\n              color={online ? \"blue\": \"red\"}\r\n              eventHandlers={{\r\n                click: () => {\r\n                  console.log('marker clicked')\r\n                },\r\n              }}\r\n              >\r\n              \r\n            </CircleMarker>\r\n          )}\r\n          {footpaths.map((positions, idx) =>\r\n          <FootpathPolyLine\r\n            key={`marker-${idx}`} \r\n            positions={positions}\r\n            idx={idx}\r\n          />\r\n          )}\r\n           <MapEvents className=\"events\" mouse={mousePosition}/>\r\n      </MapContainer>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default LeafletMap;\r\n",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":2,"column":10,"nodeType":"47","messageId":"48","endLine":2,"endColumn":22},{"ruleId":"45","severity":1,"message":"49","line":2,"column":24,"nodeType":"47","messageId":"48","endLine":2,"endColumn":33},{"ruleId":"45","severity":1,"message":"50","line":2,"column":35,"nodeType":"47","messageId":"48","endLine":2,"endColumn":47},{"ruleId":"45","severity":1,"message":"51","line":2,"column":49,"nodeType":"47","messageId":"48","endLine":2,"endColumn":55},{"ruleId":"45","severity":1,"message":"52","line":3,"column":8,"nodeType":"47","messageId":"48","endLine":3,"endColumn":9},{"ruleId":"45","severity":1,"message":"53","line":5,"column":9,"nodeType":"47","messageId":"48","endLine":5,"endColumn":15},{"ruleId":"45","severity":1,"message":"54","line":2,"column":59,"nodeType":"47","messageId":"48","endLine":2,"endColumn":65},{"ruleId":"45","severity":1,"message":"55","line":3,"column":13,"nodeType":"47","messageId":"48","endLine":3,"endColumn":19},{"ruleId":"45","severity":1,"message":"56","line":12,"column":10,"nodeType":"47","messageId":"48","endLine":12,"endColumn":17},{"ruleId":"45","severity":1,"message":"57","line":17,"column":11,"nodeType":"47","messageId":"48","endLine":17,"endColumn":14},{"ruleId":"58","severity":1,"message":"59","line":30,"column":17,"nodeType":"60","endLine":31,"endColumn":56},{"ruleId":"61","severity":1,"message":"62","line":64,"column":33,"nodeType":"63","messageId":"64","endLine":64,"endColumn":35},{"ruleId":"45","severity":1,"message":"65","line":95,"column":21,"nodeType":"47","messageId":"48","endLine":95,"endColumn":31},{"ruleId":"45","severity":1,"message":"66","line":101,"column":20,"nodeType":"47","messageId":"48","endLine":101,"endColumn":29},{"ruleId":"45","severity":1,"message":"67","line":110,"column":11,"nodeType":"47","messageId":"48","endLine":110,"endColumn":25},{"ruleId":"45","severity":1,"message":"68","line":120,"column":11,"nodeType":"47","messageId":"48","endLine":120,"endColumn":20},{"ruleId":"45","severity":1,"message":"69","line":125,"column":9,"nodeType":"47","messageId":"48","endLine":125,"endColumn":17},{"ruleId":"45","severity":1,"message":"70","line":270,"column":13,"nodeType":"47","messageId":"48","endLine":270,"endColumn":16},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'MapContainer' is defined but never used.","Identifier","unusedVar","'TileLayer' is defined but never used.","'CircleMarker' is defined but never used.","'Marker' is defined but never used.","'L' is defined but never used.","'Button' is defined but never used.","'useMap' is defined but never used.","'LatLng' is defined but never used.","'isEmpty' is defined but never used.","'map' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setProject' is assigned a value but never used.","'setCamera' is assigned a value but never used.","'calcGCDistance' is assigned a value but never used.","'getOnline' is assigned a value but never used.","'interval' is assigned a value but never used.","'res' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]